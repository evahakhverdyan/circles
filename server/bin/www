#!/usr/bin/env node

const app = require('../app');
const socketApp = require('../socketApp');
const debug = require('debug')('server:server');
const WebSocketServer = require('websocket').server;
const http = require('http');
const https = require('https');
const fs = require('fs');
const QueueManager = require('../models/QueueManager');

let httpPort = normalizePort(process.env.PORT || '3000');
let socketsPort = normalizePort(process.env.SOCKETS_PORT || '8443');

let queueManager = new QueueManager();

let httpServer = http.createServer(app);
app.set('port', httpPort);
httpServer.on('error', onError.bind(httpServer));
httpServer.on('listening', onListening.bind(httpServer));
httpServer.listen(httpPort);

let httpsOptions = {
    key: fs.readFileSync('/var/www/server/ssl/xip.io.key'),
    cert: fs.readFileSync('/var/www/server/ssl/xip.io.crt')
};

let socketHttpServer = https.createServer(httpsOptions, response404OnNonSocketRequest);
socketHttpServer.on('error', onError.bind(socketHttpServer));
socketHttpServer.on('listening', onListening.bind(socketHttpServer));
socketHttpServer.listen(socketsPort);
let socketServer = new WebSocketServer({httpServer: socketHttpServer});
socketServer.on('request', function (request) {
    socketApp(request, queueManager);
});

function response404OnNonSocketRequest(request, response) {
    debug((new Date()) + ' Received request for ' + request.url);
    response.writeHead(404);
    response.end();
}

function normalizePort(portString) {
    let parsedPort = parseInt(portString, 10);
    let isNamedPipe = isNaN(parsedPort);

    if (isNamedPipe) {
        return portString;
    }

    if (parsedPort >= 0) {
        return parsedPort;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let server = this;
    let httpPort = server.address().port;
    let bind = typeof httpPort === 'string'
        ? 'Pipe ' + httpPort
        : 'Port ' + httpPort;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    let server = this;
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}